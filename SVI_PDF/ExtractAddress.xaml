<Activity mc:Ignorable="sap sap2010" x:Class="ExtractAddress" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="in_ExtractAddrDT" Type="InArgument(sd:DataTable)" />
    <x:Property Name="out_AddressArr" Type="OutArgument(s:String[])" />
    <x:Property Name="in_OrderNo" Type="InArgument(x:String)" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>498,712</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>ExtractAddress_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="30">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>UiPath.Abbyy.Core.FlexiCapture</x:String>
      <x:String>UiPath.Abbyy.Core.FlexiCapture.Enums</x:String>
      <x:String>UiPath.Abbyy.Core.FlexiCapture.ValidationStationAdapters</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>System.Text.RegularExpressions</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.DataExtraction</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.Results</x:String>
      <x:String>UiPath.DocumentProcessing.Contracts.Dom</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="23">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Abbyy.Core</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.Collections.Immutable</AssemblyReference>
      <AssemblyReference>UiPath.DocumentProcessing.Contracts</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="ExtractAddress" sap:VirtualizedContainerService.HintSize="478,652" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="sd:DataTable" Name="TempAddrDT" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <ui:FilterDataTable DataTable="[in_ExtractAddrDT]" DisplayName="Filter Data Table" FilterRowsMode="Keep" sap:VirtualizedContainerService.HintSize="436,59" sap2010:WorkflowViewState.IdRef="FilterDataTable_1" OutputDataTable="[TempAddrDT]" SelectColumnsMode="Keep">
      <ui:FilterDataTable.Filters>
        <scg:List x:TypeArguments="ui:FilterOperationArgument" Capacity="4">
          <ui:FilterOperationArgument BooleanOperator="And" Operator="EQ">
            <ui:FilterOperationArgument.Column>
              <InArgument x:TypeArguments="x:String">["OrderNo"]</InArgument>
            </ui:FilterOperationArgument.Column>
            <ui:FilterOperationArgument.Operand>
              <InArgument x:TypeArguments="x:String">[in_OrderNo]</InArgument>
            </ui:FilterOperationArgument.Operand>
          </ui:FilterOperationArgument>
        </scg:List>
      </ui:FilterDataTable.Filters>
      <ui:FilterDataTable.SelectColumns>
        <scg:List x:TypeArguments="InArgument" Capacity="4">
          <InArgument x:TypeArguments="x:String">["CustomerName"]</InArgument>
          <InArgument x:TypeArguments="x:String">["Address1"]</InArgument>
          <InArgument x:TypeArguments="x:String">["Address2"]</InArgument>
        </scg:List>
      </ui:FilterDataTable.SelectColumns>
    </ui:FilterDataTable>
    <ui:CommentOut DisplayName="Comment Out" sap:VirtualizedContainerService.HintSize="436,257" sap2010:WorkflowViewState.IdRef="CommentOut_6">
      <ui:CommentOut.Body>
        <Sequence DisplayName="Ignored Activities" sap:VirtualizedContainerService.HintSize="376,179" sap2010:WorkflowViewState.IdRef="Sequence_7">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:ReadRange AddHeaders="False" DataTable="[TempAddrDT]" DisplayName="Read Range" sap:VirtualizedContainerService.HintSize="334,87" sap2010:WorkflowViewState.IdRef="ReadRange_1" SheetName="Sheet1" WorkbookPath="Jeunesse\_SampleData\TestAddress.xlsx">
            <ui:ReadRange.Range>
              <InArgument x:TypeArguments="x:String">
                <Literal x:TypeArguments="x:String" Value="" />
              </InArgument>
            </ui:ReadRange.Range>
          </ui:ReadRange>
        </Sequence>
      </ui:CommentOut.Body>
    </ui:CommentOut>
    <ui:InvokeCode ContinueOnError="{x:Null}" Code="'Console.WriteLine(&quot;Start&quot;)&#xD;&#xA;&#x9;&#x9;'Initial&#xD;&#xA;        'Dim TempAddr As DataTable&#xD;&#xA;&#x9;&#x9;'Dim NewLine As Constants = vbCrLf&#xD;&#xA;        Dim CustomerName As String = TempAddrDT(0)(0).ToString&#xD;&#xA;        Dim Address1 As String = TempAddrDT(0)(1).ToString&#xD;&#xA;        Dim Address2 As String = TempAddrDT(0)(2).ToString&#xD;&#xA;&#xD;&#xA;        'Main variable&#xD;&#xA;        Dim AddrStr As String = &quot;&quot;&#xD;&#xA;        Dim Tambol As String = &quot;&quot;&#xD;&#xA;        Dim Amphur As String = &quot;&quot;&#xD;&#xA;        Dim Province As String = &quot;&quot;&#xD;&#xA;        Dim PostalCode As String = &quot;&quot;&#xD;&#xA;        Dim Email As String = &quot;&quot;&#xD;&#xA;        Dim Phone As String = &quot;&quot;&#xD;&#xA;&#xD;&#xA;        'Other Variable&#xD;&#xA;        Dim StrArr() As String&#xD;&#xA;        Dim LastString As String = &quot;&quot;&#xD;&#xA;        Dim TextString As String = &quot;&quot;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;        Dim TempArr() As String&#xD;&#xA;&#x9;&#x9;Dim TempText As String = &quot;&quot;&#xD;&#xA;&#x9;&#x9;Dim AddrText As String = &quot;&quot;&#xD;&#xA;&#xD;&#xA;        'Output&#xD;&#xA;        'Dim AddressArr() As String&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;        'Manipulate Address1 (1/2)&#xD;&#xA;        Address1 = Address1.Replace(&quot; ต &quot;, &quot; ต.&quot;)&#xD;&#xA;&#x9;&#x9;Address1 = Address1.Replace(&quot; ต. &quot;, &quot; ต.&quot;)&#xD;&#xA;&#x9;&#x9;Address1 = Address1.Replace(&quot; ตำบล &quot;, &quot; ตำบล&quot;)&#xD;&#xA;        Address1 = Address1.Replace(&quot; อ &quot;, &quot; อ.&quot;)&#xD;&#xA;&#x9;&#x9;Address1 = Address1.Replace(&quot; อ. &quot;, &quot; อ.&quot;)&#xD;&#xA;&#x9;&#x9;Address1 = Address1.Replace(&quot; อำเภอ &quot;, &quot; อำเภอ&quot;)&#xD;&#xA;&#xD;&#xA;        'Get last string&#xD;&#xA;'Console.WriteLine(&quot;Address1 : &quot; + Address1)&#xD;&#xA;&#x9;&#x9;LastString = Regex.Match(Address1, &quot;(.+),\s*(.+)\n*(.+)\s(\d{4,6})&quot;).Value&#xD;&#xA;'Console.WriteLine(&quot;LastString : &quot; + LastString)&#xD;&#xA;&#xD;&#xA;        'Manipulate Address1 (2/2)&#xD;&#xA;        'Address1 = Address1.Replace(vbCrLf, &quot; &quot;c)                               'Merge line&#xD;&#xA;        'StrArr = Address1.Split(&quot;,&quot;c)&#xD;&#xA;&#xD;&#xA;        'Manipulate LastString&#xD;&#xA;&#x9;&#x9;StrArr = LastString.Split(&quot;,&quot;c)&#xD;&#xA;        TextString = StrArr(StrArr.Length - 1).ToString&#xD;&#xA;        TextString = TextString.Replace(vbLf, &quot; &quot;c)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;'Postal&#xD;&#xA;        PostalCode = Regex.Match(TextString, &quot;\d{4,6}&quot;).Value&#xD;&#xA;        TextString = TextString.Replace(PostalCode, &quot;&quot;)                         'Replace TextString&#xD;&#xA;'Console.WriteLine(&quot;Postal : &quot; + PostalCode)&#xD;&#xA;&#x9;&#x9;'Province&#xD;&#xA;&#x9;&#x9;TextString = TextString.Replace(vbLf, &quot; &quot;c)&#xD;&#xA;        Province = TextString.Trim&#xD;&#xA;'Console.WriteLine(&quot;Province : &quot; +Province )&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;'Amphur&#xD;&#xA;&#x9;&#x9;Amphur = StrArr(0).ToString.Trim&#xD;&#xA;'Console.WriteLine(&quot;Amphur : &quot; +Amphur )&#x9;&#xD;&#xA;        &#xD;&#xA;&#x9;&#x9;Address1 = Address1.Replace(LastString, &quot;&quot;).Replace(vbLf, &quot; &quot;c)&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;'Replace Address1&#xD;&#xA;'Console.WriteLine(&quot;Address1 : &quot; +Address1 )&#x9;&#xD;&#xA;&#xD;&#xA;        'Tambol&#xD;&#xA;        TempArr = Address1.Split(&quot; &quot;c)                                        &#xD;&#xA;        For Each AddrText In TempArr&#xD;&#xA;&#x9;&#x9;&#x9;If Tambol = &quot;&quot; Then&#xD;&#xA;&#x9;            If AddrText.ToString.Contains(&quot; ต.&quot;) Or AddrText.ToString.Contains(&quot; ตำบล&quot;) Then&#xD;&#xA;                &#x9;Tambol = AddrText.ToString&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xD;&#xA;            End If&#xD;&#xA;        Next&#xD;&#xA;'Console.WriteLine(&quot;Tambol : &quot; + Tambol)&#xD;&#xA;&#x9;&#x9;If Not Tambol = &quot;&quot; Then&#xD;&#xA;&#x9;&#x9;&#x9;Address1 = Address1.Replace(Tambol, &quot;&quot;)&#xD;&#xA;&#x9;&#x9;End If&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;'Amphur - Overwrite&#xD;&#xA;        For Each AddrText In TempArr&#xD;&#xA;            If Amphur = &quot;&quot; Then&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;If AddrText.ToString.Contains(&quot; อ.&quot;) Or AddrText.ToString.Contains(&quot; อำเภอ&quot;) Then&#xD;&#xA;                &#x9;Amphur = AddrText.ToString&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;End If&#xD;&#xA;            End If&#xD;&#xA;        Next&#xD;&#xA;&#x9;&#x9;If  Not Amphur = &quot;&quot; Then&#xD;&#xA;&#x9;&#x9;&#x9;Address1 = Address1.Replace(Amphur, &quot;&quot;)&#xD;&#xA;&#x9;&#x9;End If&#xD;&#xA;&#x9;&#x9;AddrStr = Address1.Trim&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        '--Address2--&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;'Email&#xD;&#xA;        Email = Regex.Match(Address2, &quot;(.+)\@\n?(.+)\n?\.(.+)&quot;).Value&#xD;&#xA;&#x9;&#x9;Address2 = Address2.Replace(Email, &quot;&quot;)&#xD;&#xA;&#x9;&#x9;Email = Email.Replace(vbLf, &quot;&quot;).Replace(&quot; &quot;c, &quot;&quot;)&#xD;&#xA;'Console.WriteLine(Email)&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;'Phone&#xD;&#xA;&#x9;&#x9;Phone = Address2.Trim&#xD;&#xA;'Console.WriteLine(Phone)&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;        Console.WriteLine(CustomerName + &quot; // &quot; + AddrStr + &quot; // &quot; + Tambol + &quot; // &quot; + Amphur + &quot; // &quot; + Province + &quot; // &quot; + PostalCode + &quot; // &quot; + Phone + &quot; // &quot; + Email)&#xD;&#xA;        Console.ReadLine()&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;AddressArr = {AddrStr, CustomerName, Tambol, Amphur, Province, PostalCode, Phone, Email}&#xD;&#xA;&#x9;&#x9;" DisplayName="Invoke code" sap:VirtualizedContainerService.HintSize="436,164" sap2010:WorkflowViewState.IdRef="InvokeCode_1">
      <ui:InvokeCode.Arguments>
        <InArgument x:TypeArguments="sd:DataTable" x:Key="TempAddrDT">[TempAddrDT]</InArgument>
        <OutArgument x:TypeArguments="s:String[]" x:Key="AddressArr">[out_AddressArr]</OutArgument>
      </ui:InvokeCode.Arguments>
    </ui:InvokeCode>
  </Sequence>
</Activity>